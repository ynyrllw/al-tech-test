The Technical Assignment
The brief for the technical assignment:
Please prepare an archive that implements the steps below: The solution should contain
● A Vagrantfile
● All associated configuration management files
● A README.md that lists both the steps we should run to duplicate your solution and any
assumed software version(s).
Build the following infrastructure in vagrant using configuration management (Ansible, Chef or
similar):

The brief:
- All VMs built using the following vagrant box:
https://app.vagrantup.com/ubuntu/boxes/bionic64
- All VMs allow the vagrant user, and users in the admin group, to sudo without a password
- Webservers and load balancer running nginx
- Simple ‘Hello World’ application deployed to both webservers
- Automated tests to show that app is deployed correctly and nginx is load balancing correctly
- Solution is idempotent
You may use vagrant’s built in provisioner to install the config manager of your choice.

We’re interested in your working as much as your answers, so where you make a decision to go one
way rather than another, please explain your thinking . Your solution will be assessed on code quality
and comprehensibility, as well as the quality of your documentation, not just on technical correctness.
Optional extra credit:
● Include a section for possible improvements and compromises made during the development of
your solution TODO
● Have the webapp be dynamic - e.g. perform a db query for inclusion in the response (such as
picking a random quote from a database) or calling an API of your choice(e.g. weather).
● => Any additional resources (e.g. a shared db server) should be set up by the Vagrant file,
and configured using config management

to note:
● We will assess you based on the quality of the solution, documentation and how easily
someone else can pick it up
● It’s fine for your implementation to deviate from the task as documented (we love
innovative ideas!) - but please give full details of what you have changed and why - We’re
interested in your working as much as your answers, so where you make a decision to go
one way rather than another, please explain your thinking.
● Please give a rough indication of the number of hours spent completing this task

vagrant test
software version
v20200325.0.0 
VirtualBox 6.1.4https://download.virtualbox.org/virtualbox/6.1.4/VirtualBox-6.1.4-136177-Win.exe
Vagrant 2.2.7
explain ansible

To pause your VM, navigate to the directory with your Vagrantfile:

vagrant suspend

To turn your VM off, navigate to the directory with your Vagrantfile:

vagrant halt

To destroy your VM, navigate to the directory with your Vagrantfile:

vagrant destroy

TODO
improvments/compromises
web app
web app dynamic
Any additional resources (e.g. a shared db server) should be set up by the Vagrant file,
and configured using config management

# encoding: utf-8

VAGRANT_BOX = 'ubuntu/bionic64'# Memorable name for your
VM_NAME = 'al-yw-vm'# VM User — 'vagrant' by default
VM_USER = 'vagrant'# Username 
# VM_PORT = 8080

Vagrant.configure("2") do |config|
 # Vagrant box from Hashicorp
  config.vm.box = VAGRANT_BOX
  
  # Actual machine name
  config.vm.hostname = VM_NAME  # Set VM name in Virtualbox
  
  # Set VM name in Virtualbox
  config.vm.provider "virtualbox" do |v|
    v.name = VM_NAME
    v.memory = 2048
  end
	 #DHCP — comment this out if planning on using NAT instead
  #config.vm.network "private_network", type: "dhcp"  # # Port forwarding — uncomment this to use NAT instead of DHCP
  # config.vm.network "forwarded_port", guest: 80, host: VM_PORT  # Sync folder
  config.vm.provision "shell", inline: <<-SHELL
    usermod -aG sudo vagrant
    apt-get update
	apt-get install -y ansible
    apt-get update
    apt-get upgrade -y
    apt-get autoremove -y
  SHELL
end
